window = {
	name = "inventory_view"
	size = { 1732 930 }
	layer = bottom
	parentanchor = center

	using = Window_Movable
	using = Window_Background
	using = Window_Decoration_Spike

	datacontext = "[GetVariableSystem]"
	datacontext = "[InventoryView.GetCharacter]"
	datacontext = "[InventoryView.GetCharacter.GetInventory]"

	state = {
		name = _show
		using = Animation_FadeIn_Standard
		on_start = "[GetVariableSystem.Clear( 'court_artifacts' )]"
		on_start = "[GetVariableSystem.Clear( 'claims' )]"
		on_start = "[GetVariableSystem.Set( 'artifacts_active_tab', 'personal_artifacts_tab' )]"
		on_start = "[GetVariableSystem.Set( 'operations_active_tab', 'tab_operations_list' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		on_finish = "[AccessLocalPlayerCachedData.AccessNewArtifacts.ClearNewArtifactsOfCategory( 'inventory' )]"
	}

	vbox = {
		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "INVENTORY_TITLE"
			}

			blockoverride "button_close"
			{
				onclick = "[InventoryView.Close]"
			}
		}


		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = growing

			# area that will contain the artifact tabs
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = growing

				# the tabs go here
				hbox = {
					name = "tabs"
					layoutpolicy_horizontal = expanding
					parentanchor = top|left
					position = { 5, 5 }

					button_tab = {
						name = "personal_artifacts_tab"
						size = { 120 50 }
						min_width = 120
						layoutpolicy_horizontal = expanding

						onclick = "[GetVariableSystem.Set( 'artifacts_active_tab', 'personal_artifacts_tab' )]"
						down = "[GetVariableSystem.HasValue( 'artifacts_active_tab', 'personal_artifacts_tab' )]"

						hbox = {

							expand = {}

							text_single = {
								margin_left = 5
								text = "PERSONAL_ARTIFACTS_TAB_TITLE"
								default_format = "#high"
							}

							expand = {}

						}
					}

					button_tab = {
						name = "court_artifacts_tab"
						size = { 120 50 }
						min_width = 120
						layoutpolicy_horizontal = expanding

						onclick = "[GetVariableSystem.Set( 'artifacts_active_tab', 'court_artifacts_tab' )]"
						down = "[GetVariableSystem.HasValue( 'artifacts_active_tab', 'court_artifacts_tab' )]"

						hbox = {

							expand = {}

							text_single = {
								margin_left = 5
								text = "COURT_ARTIFACTS_TAB_TITLE"
								default_format = "#high"
							}

							expand = {}

						}
					}

				}
				#end of tabs

				# PERSONAL ARTIFACTS DISPLAY
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					parentanchor = top|left
					min_width = 300
					visible = "[GetVariableSystem.HasValue( 'artifacts_active_tab', 'personal_artifacts_tab' )]"

					widget = {
						name = "left side"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						size = { 510 0 }

						background = {
							texture = "gfx/interface/icons/inventory/character_paperdoll.dds"
							fittype = centercrop
							alpha = 0.6
							margin_bottom = -100
							margin_left = -10
							margin_right = -10
							margin_top = 20
						}

						widget_inventory_slot = {
							name = "head_slot"
							datacontext = "[Inventory.GetSlot('crown')]"
							parentanchor = top|hcenter
							position = { 0 40 }
						}

						widget_inventory_slot = {
							name = "regalia_slot"
							datacontext = "[Inventory.GetSlot('regalia')]"
							parentanchor = vcenter|right
							position = { 0 -50 }
						}

						widget_inventory_slot = {
							name = "weapon_slot"
							datacontext = "[Inventory.GetSlot('weapon')]"
							parentanchor = vcenter|left
							position = { 0 -50 }
						}

						widget_inventory_slot = {
							name = "armor_slot"
							datacontext = "[Inventory.GetSlot('armor')]"
							parentanchor = center
							position = { 0 -50 }
						}

						widget = {
							name = "trinket_widget_hight"
							parentanchor = bottom|hcenter
							position = { 0 -120 }
							allow_outside = yes

							widget_inventory_slot = {
								name = "trinket_1_slot"
								datacontext = "[Inventory.GetSlot('trinket_1')]"
								parentanchor = bottom|hcenter
								position = { -185 0 }
							}

							widget_inventory_slot = {
								name = "trinket_2_slot"
								datacontext = "[Inventory.GetSlot('trinket_2')]"
								parentanchor = bottom|hcenter
								position = { -62 0 }
							}

							widget_inventory_slot = {
								name = "trinket_3_slot"
								datacontext = "[Inventory.GetSlot('trinket_3')]"
								parentanchor = bottom|hcenter
								position = { 62 0 }
							}

							widget_inventory_slot = {
								name = "trinket_4_slot"
								datacontext = "[Inventory.GetSlot('trinket_4')]"
								parentanchor = bottom|hcenter
								position = { 185 0 }
							}
						}

					}
				}
				# END PERSONAL ARTIFACTS

				# COURT ARTIFACTS DISPLAY
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					parentanchor = top|left
					visible = "[GetVariableSystem.HasValue( 'artifacts_active_tab', 'court_artifacts_tab' )]"

					###FARLEFT SIDE Show Displayed Court Artifacts
					widget = {
						name = "farleft side"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						size = { 560 0 }

						widget_inventory_slot = {
							name = "throne_slot"
							datacontext = "[Inventory.GetSlot('throne')]"
							parentanchor = top|hcenter
							position = { 0 80 }
						}

						widget_inventory_slot = {
							name = "wall_big_1_slot"
							datacontext = "[Inventory.GetSlot('wall_big_1')]"
							parentanchor = vcenter|right
							position = { -10 -123 }
						}

						widget_inventory_slot = {
							name = "wall_big_2_slot"
							datacontext = "[Inventory.GetSlot('wall_big_2')]"
							parentanchor = vcenter|right
							position = { -10 0 }
						}

						widget_inventory_slot = {
							name = "wall_big_3_slot"
							datacontext = "[Inventory.GetSlot('wall_big_3')]"
							parentanchor = vcenter|right
							position = { -10 123 }
						}

						widget_inventory_slot = {
							name = "wall_small_1_slot"
							datacontext = "[Inventory.GetSlot('wall_small_1')]"
							parentanchor = vcenter|left
							position = { 10 -123 }
						}

						widget_inventory_slot = {
							name = "wall_small_2_slot"
							datacontext = "[Inventory.GetSlot('wall_small_2')]"
							parentanchor = vcenter|left
							position = { 10 0 }
						}

						widget_inventory_slot = {
							name = "wall_small_3_slot"
							datacontext = "[Inventory.GetSlot('wall_small_3')]"
							parentanchor = vcenter|left
							position = { 10 123 }
						}

						widget = { #Pedestal Buttons
							name = "pedestal_widget_position"
							parentanchor = center
							position = { -62 -100 }
							allow_outside = yes

							widget_inventory_slot = {
								name = "pedestal_1_slot"
								datacontext = "[Inventory.GetSlot('pedestal_1')]"
								parentanchor = center
								position = { 0 0 }
							}

							widget_inventory_slot = {
								name = "pedestal_2_slot"
								datacontext = "[Inventory.GetSlot('pedestal_2')]"
								parentanchor = center
								position = { 123 0 }
							}

							widget_inventory_slot = {
								name = "pedestal_3_slot"
								datacontext = "[Inventory.GetSlot('pedestal_3')]"
								parentanchor = center
								position = { 0 123 }
							}

							widget_inventory_slot = {
								name = "pedestal_4_slot"
								datacontext = "[Inventory.GetSlot('pedestal_4')]"
								parentanchor = center
								position = { 123 123 }
							}
						}

						widget_inventory_slot = {
							name = "lectern_1_slot"
							datacontext = "[Inventory.GetSlot('lectern_1')]"
							parentanchor = bottom|hcenter
							position = { -62 -124 }
						}

						widget_inventory_slot = {
							name = "lectern_2_slot"
							datacontext = "[Inventory.GetSlot('lectern_2')]"
							parentanchor = bottom|hcenter
							position = { 62 -124 }
						}

						widget_inventory_slot = {
							name = "sculpture_1_slot"
							datacontext = "[Inventory.GetSlot('sculpture_1')]"
							parentanchor = bottom|hcenter
							position = { -92 0 }
						}

						widget_inventory_slot = {
							name = "sculpture_2_slot"
							datacontext = "[Inventory.GetSlot('sculpture_2')]"
							parentanchor = bottom|hcenter
							position = { 92 0 }
						}
					}


				}
				# END COURT ARTIFACTS

			}

			# the listings area
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				min_width = 150
				max_width = 300
				parentanchor = top|left

				vbox = {
					name = "right_side"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					minimumsize = { 250 -1 }
					margin_left = -2

					vbox = {
						name = "equip_artifacts_top_bar"
						visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
						layoutpolicy_horizontal = expanding
						margin_bottom = 5

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "SELECT_ARTIFACT"
							margin = { 0 2 }
							max_width = 440
						}

						hbox = {
							name = "artifact_slot_tabs"
							visible = "[And( Not( VariableSystem.Exists( 'claims' ) ), Not( VariableSystem.Exists( 'court_artifacts' ) ) )]"
							datamodel = "[InventoryView.GetUniqueInventorySlotTypes]"
							margin_top = 10
							margin_left = -6

							button_tab = { # Show all artifacts tab
								size = { 50 42 }

								tooltip = ARTIFACT_SORTING_TAB_ALL_TOOLTIP
								onclick = "[InventoryView.ClearSelectedSlot]"
								down = "[Not( InventoryView.HasSelectedSlot )]"
								using = tooltip_above

								hbox = {
									margin = { 10 0 }

									text_single = {
										layoutpolicy_horizontal = expanding
										align = center
										text = "ARTIFACT_SORTING_ALL_BUTTON"
									}

									text_single = {
										min_width = 30
										align = center
										text = "[Inventory.GetNumOfArtifacts ]"
									}
								}
							}

							item = {
								widget_inventory_slot_tab = {
									name = "artifact_slot_type"
									#visible = "[InventorySlotType.IsInventoryType]"
									datacontext = "[Inventory.GetSlot('crown')]"
								}
							}
						}
					}

					vbox = {
						name = "court_artifacts_top_bar"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						spacing = 5

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "[court_artifacts|E]"
							margin = { 0 2 }
						}

						text_multi = {
							size = { 0 45 }
							layoutpolicy_horizontal = expanding
							datacontext = "[InventoryView.GetCharacter]"
							text = "CHARACTER_WITHOUT_ROYAL_COURT_COURT_ARTIFACT_TAB"
							default_format = "#weak"
						}
					}

					hbox = {
						name = "claims_top_bar"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding

						text_label_center = {
							layoutpolicy_horizontal = expanding
							align = center|nobaseline
							text = "[artifact_claims|E]"
							margin = { 0 2 }
							max_width = 440
						}
					}

					hbox = { # artifact sorting
						name = "artifact_sorting"
						visible = "[Not( VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						spacing = 5

						button_standard = {
							name = "sort_order"
							size = { 25 25 }
							tooltip = "ARTIFACT_SORT_ORDER_TOOLTIP"
							using = tooltip_ne
							onclick = "[InventoryView.ToggleArtifactSortOrder]"

							button_icon = {
								size = { 25 25 }
								texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
								framesize = { 66 66 }
								frame = "[BoolTo2And1(InventoryView.IsArtifactSortOrderDescending)]"

								alwaystransparent = yes

								blockoverride "button_frames"
								{
									effectname = "NoHighlight"
								}
							}
						}

						dropdown_menu_standard = {
							name = "sort_artifacts"

							blockoverride "dropdown_properties"
							{
								datamodel = "[InventoryView.GetArtifactSortOptions]"
								onselectionchanged = "[InventoryView.SortArtifacts]"
								selectedindex = "[InventoryView.GetArtifactSortOptionsIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}
						}

						button_checkbox_label = {
							name = "compact_view_toggle"
							layoutpolicy_horizontal = expanding

							onclick = "[VariableSystem.Toggle( 'artifact_compact_view' )]"
							tooltip = "Toggle Artifact Compact View"

							blockoverride "checkbox"
							{
								checked = "[VariableSystem.Exists( 'artifact_compact_view' )]"
							}

							blockoverride "text"
							{
								text = "COMPACT_VIEW_OPTION"
							}
						}

						button_checkbox_label = {
							name = "keep_open_on_distro_toggle"
							layoutpolicy_horizontal = expanding

							onclick = "[VariableSystem.Toggle( 'keep_open_on_distro' )]"
							tooltip = "Close inventory window when distributing artifact"

							blockoverride "checkbox"
							{
								checked = "[VariableSystem.Exists( 'keep_open_on_distro' )]"
							}

							blockoverride "text"
							{
								text = "KEEP_OPEN_ON_DISTRO_OPTION"
							}
						}

						expand = {}

					}

					hbox = { # claims sorting
						name = "claim_sorting"
						visible = "[VariableSystem.Exists( 'claims' )]"
						layoutpolicy_horizontal = expanding
						margin = { 10 5 }
						spacing = 5

						datacontext = "[InventoryView.GetArtifactClaimsList]"

						button_standard = {
							name = "sort_order"
							size = { 25 25 }
							tooltip = "ARTIFACT_CLAIM_SORT_ORDER_TOOLTIP"
							using = tooltip_ne
							onclick = "[ArtifactClaimsList.ToggleSortOrder]"

							button_icon = {
								size = { 25 25 }
								texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
								framesize = { 66 66 }
								frame = "[BoolTo2And1( ArtifactClaimsList.IsSortOrderDescending )]"

								alwaystransparent = yes

								blockoverride "button_frames"
								{
									effectname = "NoHighlight"
								}
							}
						}

						dropdown_menu_standard = {
							name = "sort_claims"

							blockoverride "dropdown_properties"
							{
								datamodel = "[ArtifactClaimsList.GetSortOptions]"
								onselectionchanged = "[ArtifactClaimsList.SortClaims]"
								selectedindex = "[ArtifactClaimsList.GetSortOptionsIndex]"
							}

							blockoverride "dropdown_active_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}

							blockoverride "dropdown_item_properties"
							{
								text = "[Localize( CString.GetString )]"
							}
						}

						expand = {}
					}

					scrollbox = { # court artifacts
						name = "court_artifacts"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'court_artifacts' ) )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								name = "artifacts_list"
								datamodel = "[InventoryView.GetSortedArtifacts]"
								layoutpolicy_horizontal = expanding
								spacing = 6
								margin_left = -10
								margin_top = -10

								item = {
									widget_artifact_entry = {
										visible = "[Artifact.IsCourtArtifact]"
										datacontext = "[InventoryView.GetCharacter.GetInventory]"
										datacontext = "[InventoryView.GetSelectedSlot]"

										blockoverride "background_button_overrides"
										{
											alwaystransparent = yes
											enabled = no
										}

										blockoverride "portrait" {
											expand = { minimumsize = { 0 0 } }
										}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( InventoryView.GetSortedArtifacts )]"
							text = "CHARACTER_HAS_NO_ARTIFACTS"
						}
					}

					scrollbox = { # artifact claims
						name = "artifact_claims"
						datacontext = "[InventoryView.GetArtifactClaimsList]"
						visible = "[And( Not( InventoryView.HasSelectedSlot ), VariableSystem.Exists( 'claims' ) )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							fixedgridbox = {
								name = "artifacts_list"
								datamodel = "[ArtifactClaimsList.GetClaims]"
								addcolumn = 570
								addrow = 90

								item = {
									artifact_claim = {
										datacontext = "[ArtifactClaim.GetArtifact]"
										datacontext = "[InventoryView.GetCharacter]"
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[IsDataModelEmpty( ArtifactClaimsList.GetClaims )]"
							text = "CHARACTER_HAS_NO_CLAIMED_ARTIFACTS"
						}
					}

					scrollbox = { # artifact list
						name = "artifacts"
						visible = "[And( Not( VariableSystem.Exists( 'court_artifacts' ) ), Not( VariableSystem.Exists( 'claims' ) ))]"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								name = "equippable_artifacts_list"
								datamodel = "[InventoryView.GetSortedArtifacts]"
								layoutpolicy_horizontal = expanding
								spacing = 10
								margin_left = -10
								margin_top = -10

								item = {
									widget_artifact_entry = {
										datacontext = "[InventoryView.GetCharacter.GetInventory]"
										datacontext = "[InventoryView.GetSelectedSlot]"
										datacontext = "[InventoryView.GetSelectedSlot.GetType]"

										visible = "[And( Or(  Not( InventoryView.HasSelectedSlot ), InventorySlot.CanHoldArtifact( Artifact.Self ) ), Not(VariableSystem.Exists('artifact_compact_view')) )]"

										tooltipwidget = {
											artifact_tooltip = {
												blockoverride "extra_information"
												{
													hbox = {
														layoutpolicy_horizontal = expanding

														text_multi = {
															visible = "[InventoryView.GetCharacter.IsLocalPlayer]"
															text = "[InventoryView.GetArtifactOnClickTooltip( Artifact.Self )]"
															max_width = 500
															autoresize = yes
															using = Font_Size_Small
														}

														expand = {}
													}
												}
											}
										}

										using = tooltip_es

										blockoverride "background_button_overrides"
										{
											onclick = "[InventoryView.OnClickArtifact( Artifact.Self )]"
											#enable interact for court artifact only for character with a royal court
											enabled = "[And( InventoryView.GetCharacter.IsLocalPlayer, Or( Artifact.IsInventoryArtifact, Character.HasRoyalCourt ) )]"
											down = "[Inventory.IsEquipped( Artifact.Self )]"
										}

										blockoverride "portrait" {
											expand = { minimumsize = { 0 0 } }
										}
									}
								}
							}
							vbox = {
								name = "equippable_artifacts_list_compact"
								datamodel = "[InventoryView.GetSortedArtifacts]"
								layoutpolicy_horizontal = expanding
								spacing = 4
								margin_left = -10
								margin_top = -10

								item = {
									widget_artifact_entry_compact = {
										datacontext = "[InventoryView.GetCharacter.GetInventory]"
										datacontext = "[InventoryView.GetSelectedSlot]"
										datacontext = "[InventoryView.GetSelectedSlot.GetType]"

										visible = "[And( Or(  Not( InventoryView.HasSelectedSlot ), InventorySlot.CanHoldArtifact( Artifact.Self ) ), VariableSystem.Exists('artifact_compact_view') )]"

										tooltipwidget = {
											artifact_tooltip = {
												blockoverride "extra_information"
												{
													hbox = {
														layoutpolicy_horizontal = expanding

														text_multi = {
															visible = "[InventoryView.GetCharacter.IsLocalPlayer]"
															text = "[InventoryView.GetArtifactOnClickTooltip( Artifact.Self )]"
															max_width = 500
															autoresize = yes
															using = Font_Size_Small
														}

														expand = {}
													}
												}
											}
										}

										using = tooltip_es

										blockoverride "background_button_overrides"
										{
											onclick = "[InventoryView.OnClickArtifact( Artifact.Self )]"
											#enable interact for court artifact only for character with a royal court
											enabled = "[And( InventoryView.GetCharacter.IsLocalPlayer, Or( Artifact.IsInventoryArtifact, Character.HasRoyalCourt ) )]"
											down = "[Inventory.IsEquipped( Artifact.Self )]"
										}

										blockoverride "portrait" {
											expand = { minimumsize = { 0 0 } }
										}
									}
								}
							}
						}

						blockoverride "scrollbox_empty"
						{
							visible = "[Or( Not( Inventory.HasAnyInventoryArtifact ), And( InventoryView.HasSelectedSlot, Not( Inventory.HasArtifactsOfSlotType( InventoryView.GetSelectedSlot.GetType ) ) ) )]"
							text = "CHARACTER_HAS_NO_ARTIFACTS"
						}
					}
				}

			}
			# the listings area

			# the antiquarian area
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				min_width = 400

				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes
					margin = { 0 10 }

					text_single = {
						text = "ANTIQUARIAN"
						align = center|nobaseline
						default_format = "#high"
						fontsize = 22
					}
				}

				#Antiquarian Slot
				hbox = {
					portrait_head_small = {
						name = "antiquarian_portrait"
						datacontext = "[InventoryView.GetCharacter.GetCharacterEmployedAs( 'antiquarian_court_position' )]"

						blockoverride "portrait_button"
						{
							onclick = "[ShowAppointCourtPositionIfNoEmployee( InventoryView.GetCharacter.GetID, 'antiquarian_court_position' )]"
							enabled = "[InventoryView.GetCharacter.IsLocalPlayer]"
						}
						blockoverride "portrait_button_no_character_text"
						{
							text = "[SelectLocalization( InventoryView.GetCharacter.IsLocalPlayer,'PORTRAIT_NO_ANTIQUARIAN','CHARACTER_TOOLTIP_NO_PORTRAIT')]"
						}
					}

					expand = {}

				}

				hbox = {
					widget = {
						#parentanchor = top|hcenter
						#position = { 0 -12 }
						size = { 450 150 }
						allow_outside = yes

						vbox = {

							hbox = {
								spacing = 10

								button_standard = {
									datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
									visible = "[Not( Character.HasRoyalCourt )]"
									text = "INVENTORY_TAB_COURT_ARTIFACTS"

									tooltip = "[SelectLocalization( Inventory.HasAnyCourtArtifact, 'INVENTORY_TAB_COURT_ARTIFACTS_TOOLTIP', 'NO_COURT_ARTIFACTS' )]"

									onclick = "[VariableSystem.Toggle( 'court_artifacts' )]"
									onclick = "[VariableSystem.Clear( 'claims' )]"
									onclick = "[InventoryView.ClearSelectedSlot]"
									onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

									down = "[VariableSystem.Exists( 'court_artifacts' )]"

									button_round = {
										size = { 20 20 }
										parentanchor = top|right
										visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
										text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
									}
								}

								button_standard = {
									datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
									visible = "[Character.HasRoyalCourt]"
									text = "ROYAL_COURT"

									tooltip = "INVENTORY_COURT_ARTIFACTS_BUTTON_TOOLTIP"

									onclick = "[VariableSystem.Set( 'artifacts_tab', 'artifacts' )]"
									onclick = "[Character.OpenRoyalCourtView( 'artifacts' )]"

									onclick = "[InventoryView.Close]"
									onclick = "[LocalPlayerNewArtifacts.ClearNewArtifactsOfCategory( 'court' )]"

									button_round = {
										visible = "[GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' ), '(int32)0' )]"
										parentanchor = vcenter|right
										size = { 20 20 }
										position = { -5 0 }
										text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfCategory( 'court' )]"
									}
								}

								button_standard = {
									datacontext = "[InventoryView.GetArtifactClaimsList]"
									text = "INVENTORY_TAB_CLAIMS_HIS_HER_MY"
									enabled = "[And( DataModelHasItems( ArtifactClaimsList.GetClaims ), Not( InventoryView.HasSelectedSlot ) )]"
									tooltip = "[SelectLocalization( DataModelHasItems( ArtifactClaimsList.GetClaims ), 'INVENTORY_TAB_CLAIMS_TOOLTIP', 'NO_ARTIFACT_CLAIMS' )]"
									onclick = "[VariableSystem.Toggle( 'claims' )]"
									onclick = "[VariableSystem.Clear( 'court_artifacts' )]"
									down = "[VariableSystem.Exists( 'claims' )]"
								}
							}

							hbox = {
								datacontext = "[GetScriptedGui('at_artifacts_window_init_gui')]"
								visible = "[And(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag('sell')).End), Character.IsLocalPlayer)]"
								spacing = 10

								button_standard = {
									text = "AT_SELL_ARTIFACTS"
									enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag('sell')).End)]"
									tooltip = "AT_SELL_ARTIFACTS_TOOLTIP"

									onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag('sell')).End)]"
									onclick = "[VariableSystem.Set('at_artifacts_window_visible', 'yes')]"
									onclick = "[VariableSystem.Set('at_find_artifacts_window_visible', 'no')]"
									onclick = "[VariableSystem.Set('at_artifacts_window_flavor', 'sell')]"
								}

								button_standard = {
									text = "AT_BUY_ARTIFACTS"
									enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag('buy')).End)]"
									tooltip = "AT_BUY_ARTIFACTS_TOOLTIP"

									onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag('buy')).End)]"
									onclick = "[VariableSystem.Set('at_artifacts_window_visible', 'yes')]"
									onclick = "[VariableSystem.Set('at_find_artifacts_window_visible', 'no')]"
									onclick = "[VariableSystem.Set('at_artifacts_window_flavor', 'buy')]"
								}
							}

							button_decision_entry = {
								name = "commission_decision"
								datacontext = "[GetDecisionWithKey('commission_artifact_decision')]"
								visible = "[And( Character.IsLocalPlayer, Decision.IsShownForPlayer )]"
								size = { 350 45 }
								onclick = "[InventoryView.Close]"
								onclick = "[OpenDecisionDetailView( Decision.Self )]"
							}

						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					parentanchor = top|left
					visible = "[Character.IsLocalPlayer]"

					text_label_center = {
						layoutpolicy_horizontal = expanding
						align = center|nobaseline
						text = "ARTIFACTS_BATCH_OPERATIONS"
						margin = { 0 2 }
						max_width = 440
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						#layoutpolicy_vertical = expanding
						parentanchor = top|left
						min_width = 350

						hbox = {
							spacing = 10
							hbox = {
								spacing = 5

								button_round = {
									name = "repair_all"
									size = { 35 35 }
									visible = "[Artifact.GetOwner.IsLocalPlayer]"
									enabled = "[GetScriptedGui('AM_has_repairables').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
									button_icon_highlight = {
										size = { 30 30 }
										parentanchor = center
										texture = "gfx/interface/icons/flat_icons/reforge.dds"
									}
									tooltip = "REPAIR_ALL_ARTIFACTS"
									onclick = "[GetVariableSystem.Set('repair_all_artifacts', 'yes')]"
								}
								text_single = {
									text = "REPAIR_ALL_ARTIFACTS_BRIEF"
								}
							}
							hbox = {
								spacing = 5
								button_round = {
									name = "sell_all_unused"
									size = { 35 35 }
									visible = "[Artifact.GetOwner.IsLocalPlayer]"
									enabled = "[GetScriptedGui('AM_has_unused_artifacts').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
									button_icon_highlight = {
										size = { 30 30 }
										parentanchor = center
										texture = "gfx/interface/icons/flat_icons/prison_ransom.dds"
									}
									tooltip = "SELL_ALL_UNUSED_ARTIFACTS"
									onclick = "[GetVariableSystem.Set('auction_unused_artifact', 'yes')]"
								}
								text_single = {
									text = "SELL_ALL_UNUSED_ARTIFACTS_BRIEF"
								}
							}
						}

						hbox = {
							spacing = 5
							button_round = {
								name = "gift_inventory_artifacts"
								size = { 35 35 }
								visible = "[Artifact.GetOwner.IsLocalPlayer]"
								enabled = "[GetScriptedGui('AM_has_unused_inventory_artifacts').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"

								button_icon_highlight = {
									size = { 30 30 }
									parentanchor = center
									texture = "gfx/interface/icons/flat_icons/duel.dds"
								}
								tooltip = "GIFT_INVENTORY_ARTIFACTS"
								onclick = "[GetVariableSystem.Set('giveaway_inventory_artifacts', 'yes')]"
							}
							text_single = {
								text = "GIFT_INVENTORY_ARTIFACTS_BRIEF"
							}
						}

						hbox = {
							spacing = 5
							button_round = {
								name = "gift_court_artifacts"
								size = { 35 35 }
								visible = "[Artifact.GetOwner.IsLocalPlayer]"
								enabled = "[GetScriptedGui('AM_has_unused_court_artifacts').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
								button_icon_highlight = {
									size = { 30 30 }
									parentanchor = center
									texture = "gfx/interface/icons/flat_icons/royal_court.dds"
								}
								tooltip = "GIFT_COURT_ARTIFACTS"
								onclick = "[GetVariableSystem.Set('giveaway_court_artifacts', 'yes')]"
							}
							text_single = {
								text = "GIFT_COURT_ARTIFACTS_BRIEF"
							}
						}

						hbox = {
							spacing = 5
							visible = "[GetVariableSystem.HasValue( 'operations_active_tab', 'tab_operations_list' )]"
							button_round = {
								name = "option_toggle_show"
								size = { 35 35 }
								button_icon_highlight = {
									size = { 30 30 }
									parentanchor = center
									texture = "gfx/interface/icons/flat_icons/dots.dds"
								}
								onclick = "[GetVariableSystem.Set( 'operations_active_tab', 'tab_operations_options' )]"
							}

							text_single = {
								text = "SHOW_ADVANCED_OPTIONS"
							}
						}

						hbox = {
							spacing = 5
							visible = "[GetVariableSystem.HasValue( 'operations_active_tab', 'tab_operations_options' )]"
							button_round = {
								name = "option_toggle_hide"
								size = { 35 35 }
								button_icon_highlight = {
									size = { 30 30 }
									parentanchor = center
									texture = "gfx/interface/icons/flat_icons/cancel.dds"
								}
								onclick = "[GetVariableSystem.Set( 'operations_active_tab', 'tab_operations_list' )]"
							}

							text_single = {
								text = "HIDE_ADVANCED_OPTIONS"
							}
						}

					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						parentanchor = top|left
						min_width = 350
						spacing = 5
						visible = "[GetVariableSystem.HasValue( 'operations_active_tab', 'tab_operations_options' )]"

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						text_single = {
							text = "RECEIVER_OPTIONS"
						}

						hbox = {
							spacing = 5

							button_checkbox_label = {
								name = "gift_option_close_family"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_receiver_close_family')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "RECEIVER_CLOSE_FAMILY"
								}
							}

							button_checkbox_label = {
								name = "gift_option_extended_family"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_receiver_extended_family')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "RECEIVER_EXTENDED_FAMILY"
								}
							}


						}

						hbox = {
							spacing = 5

							button_checkbox_label = {
								name = "gift_option_vassals"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_receiver_vassals')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "RECEIVER_VASSALS"
								}
							}

							button_checkbox_label = {
								name = "gift_option_knights"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_receiver_knights')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "RECEIVER_KNIGHTS"
								}
							}

							button_checkbox_label = {
								name = "gift_option_courtiers"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_receiver_courtiers')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "RECEIVER_COURTIERS"
								}
							}
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						text_single = {
							text = "GIFTING_OPTIONS"
						}

						hbox = {
							spacing = 5

							button_checkbox_label = {
								name = "gift_available_illustrious"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_illustrious')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "OPTION_ILLUSTRIOUS"
								}
							}

							button_checkbox_label = {
								name = "gift_available_famed"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_famed')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "OPTION_FAMED"
								}
							}

							button_checkbox_label = {
								name = "gift_available_masterwork"
								layoutpolicy_horizontal = expanding

								datacontext = "[GetScriptedGui('am_option_toggle_masterwork')]"
								onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"

								blockoverride "checkbox"
								{
									checked = "[ScriptedGui.IsShown( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
								}

								blockoverride "text"
								{
									text = "OPTION_MASTERWORK"
								}
							}

						}

					}

				}

				expand = {}
			}
			#end of antiquarian area

		}
	}
}

types InventoryViewTypes
{
	type widget_inventory_slot = widget
	{
		size = { 150 140 }


		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		icon = { # Glow Effect
			#	visible = "[And(RoyalCourtWindow.IsSelectedSlot( InventorySlot.Self ), InventorySlot.IsEmpty)]"
			visible = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"
			size = { 120% 120% }
			texture = "gfx/interface/colors/white.dds"
			using = Color_Bright_Yellow
			alpha = 0.7
			parentanchor=center

			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.3
				alpha = 0.7
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.6
				alpha = 0
			}

			state = {
				name = "a"
				next = "b"
				trigger_on_create = yes
				alpha = 0.7

				modify_texture = {
					name = "glow_1"
					rotate_uv = 0
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 0
				}
			}

			state = {
				name = "b"
				next = "a"
				duration = 7

				modify_texture = {
					name = "glow_1"
					rotate_uv = 360
				}

				modify_texture = {
					name = "glow_2"
					rotate_uv = 360
				}
			}

			modify_texture = {
				name = "glow_1"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
			}

			modify_texture = {
				name = "glow_2"
				texture = "gfx/interface/component_masks/mask_glow.dds"
				blend_mode = alphamultiply
				mirror = horizontal
			}
		}

		widget = {
			using = Window_Background_NoDecoration
			size = {100% 100%}
		}

		text_single = {
			parentanchor = top|hcenter
			text = "[InventorySlot.GetName]"
			position = { 0 -6 }
		}

		button_artifact = {
			name = "equipped_artifact_button"
			datacontext = "[InventorySlot.GetArtifact]"
			visible = "[Not( InventorySlot.IsEmpty )]"
			parentanchor = center
			size = { 100 100 }

			using = tooltip_se

			down = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"

			blockoverride "on_click"
			{
				onclick = "[InventoryView.OnClickSlot( InventorySlot.Self )]"
				onclick = "[GetVariableSystem.Clear( 'court_artifacts' )]"
			}

			state = {
				name = _mouse_hierarchy_enter
				on_start = "[PdxGuiWidget.FindChild('unequip_button').TriggerAnimation('hover_enter')]"
			}

			state = {
				name = _mouse_hierarchy_leave
				on_start = "[PdxGuiWidget.FindChild('unequip_button').TriggerAnimation('hover_leave')]"
			}

			button_round = {
				name = "unequip_button"
				parentanchor = top|right
				size = { 30 30 }

				visible = "[And( Not(InventorySlot.IsEmpty), InventoryView.GetCharacter.IsLocalPlayer )]"
				alpha = 0

				state = {
					name = hover_enter
					alpha = 1
					duration = 0.4
					using = Animation_Curve_Default
				}

				state = {
					name = hover_leave
					alpha = 0
					duration = 0.6
					using = Animation_Curve_Default
				}

				onclick = "[InventoryView.Unequip( InventorySlot.GetArtifact )]"
				tooltip = "UNEQUIP_QUICK_TT"

				button_icon_highlight = {
					parentanchor = center
					size = { 30 30 }
					texture = "gfx/interface/icons/flat_icons/cancel_small.dds"
				}
			}
		}

		button_icon = {
			name = "empty_slot_button"
			datacontext = "[InventorySlot]"
			datacontext = "[InventoryView]"
			visible = "[And( InventorySlot.IsEmpty, InventoryView.GetCharacter.IsLocalPlayer )]"
			parentanchor = center
			size = { 60 60 }

			texture = "[InventorySlot.GetType.GetIcon]"
			spriteType = Corneredtiled
			spriteborder = { 2 2 }

			tooltip = "INVENTORY_SLOT_TT"
			onclick = "[InventoryView.ToggleSelectedSlot( InventorySlot.Self )]"
			onclick = "[GetVariableSystem.Clear( 'court_artifacts' )]"
			down = "[InventoryView.IsSelectedSlot( InventorySlot.Self )]"
		}

		button_round = {
			parentanchor = bottom|right
			position = { -20 -20 }
			size = { 20 20 }
			alwaystransparent = yes
			visible = "[And( InventoryView.GetCharacter.IsLocalPlayer, GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlot.GetSlotTypeString ), '(int32)0' ) )]"

			text_single = {
				parentanchor = center
				text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlot.GetSlotTypeString )]"
				align = nobaseline
			}
		}

		widget = {
			parentanchor = bottom|hcenter
			position = { 0 10 }
			datacontext = "[InventorySlot.GetArtifact]"

			hbox = {
				visible = "[And( Not(InventorySlot.IsEmpty), Artifact.IsDurabilityLow) ]"
				spacing = 2
				tooltip = "[Artifact.GetDurabilityTooltip]"
				margin = { 8 3 }
				set_parent_size_to_minimum = yes

				icon_flat_standard = {
					size = { 20 20 }
					texture = "gfx/interface/icons/flat_icons/quality.dds"
				}

				expand = {}

				hbox = {
					spacing = 2

					text_single = {
						max_width = 80
						text = "ARTIFACT_YEARS_UNTIL_DECAY"
						using = Font_Size_Small
						align = nobaseline
					}

					expand = {}

					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/symbols/icon_warning.dds"
					}
				}

				background = {
					margin = { 20 2 }

					texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
					spriteType = Corneredtiled
					spriteborder = { 40 8 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
			}
		}
	}

	type widget_inventory_slot_tab = button_tab
	{
		size = { 45 42 }
		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
		down = "[InventoryView.SelectedSlotHasType( InventorySlotType.Self )]"
		onclick = "[InventoryView.OnClickSlotTypeTab( InventorySlotType.Self )]"
		tooltip = ARTIFACT_SORTING_TAB_TOOLTIP

		using = tooltip_above

		button_icon = {
			parentanchor = top|left
			position = { 8 8 }
			size = { 30 30 }
			texture = "[InventorySlotType.GetIcon]"
			alwaystransparent = yes
		}

		button_round = {
			parentanchor = bottom|right
			position = { -6 -4 }
			size = { 20 20 }
			alwaystransparent = yes
			visible = "[And( InventoryView.GetCharacter.IsLocalPlayer, GreaterThan_int32( LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlotType.GetSlotTypeString ), '(int32)0' ) )]"

			text_single = {
				parentanchor = center
				text = "[LocalPlayerNewArtifacts.GetNumNewArtifactsOfSlot( InventorySlotType.GetSlotTypeString )]"
				align = nobaseline
			}
		}
	}

	type hbox_artifact_durability = hbox
	{
		visible = "[Artifact.IsValid]"
		spacing = 2
		tooltip = "[Artifact.GetDurabilityTooltip]"

		icon_flat_standard = {
			size = { 20 20 }
			texture = "gfx/interface/icons/flat_icons/quality.dds"
		}

		progressbar_standard = {
			name = "durability_high"
			visible = "[Not( Artifact.IsDurabilityLow )]"
			size = { 100 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		progressbar_standard = {
			name = "durability_low"
			visible = "[Artifact.IsDurabilityLow]"
			size = { 100 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		hbox = {
			spacing = 4

			text_single = {
				visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
				max_width = 80
				text = "ARTIFACT_YEARS_UNTIL_DECAY"
				using = Font_Size_Small
				align = nobaseline
			}

			icon = {
				visible = "[Artifact.IsDurabilityLow]"
				size = { 20 20 }
				texture = "gfx/interface/icons/symbols/icon_warning.dds"
			}
		}

		expand = {}
	}

	type widget_artifact_entry = widget
	{
		# Requires
		# datacontext = character
		# datacontext = Inventory
		# datacontext = InventorySlot

		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
		datacontext = "[GetIllustration( 'artifact_regional_pattern' )]"
		size = { 560 110 }
		using = tooltip_above

		button_standard = { #Artefact Icon Rarity and New Glow
			size = { 92% 100% }

			framesize = { 249 78 }
			spriteType = Corneredtiled
			spriteborder = { 20 20 }

			icon =  {
				texture = "[Illustration.GetTextureForCulture( Artifact.GetCulture )]"
				spriteType = Corneredtiled
				size = { 100% 15% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.2
				alwaystransparent = yes
			}

			icon =  {
				texture = "[Illustration.GetTextureForCulture( Artifact.GetCulture )]"
				spriteType = Corneredtiled
				size = { 100% 15% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.2
				alwaystransparent = yes
				parentanchor = bottom
			}

			block "button"
			{
				enabled = "[Character.IsLocalPlayer]"
				clicksound = "event:/DLC/EP1/SFX/UI/inventory_artifact_place"
			}

			block "overlay"
			{
				using = default_character_list_overlay
			}

			block "background_button_overrides" {}

			tooltipwidget = {
				artifact_tooltip = {}
			}

			using = tooltip_es

			block "new_artifact"
			{
				icon = {
					name = "new_artifact_glow"
					visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
					parentanchor = center
					position = { 2 2 }
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 15 13 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}
		}

		flowcontainer = { #Artifact Equip Satus
			name = "equip_status"
			visible = "[Inventory.IsEquipped( Artifact.Self )]"
			parentanchor = top|right
			widgetanchor = top|right
			position = { -52 18 }

			allow_outside = yes

			text_single = {
				text = "EQUIPPED_ARTIFACT"
				align = right|nobaseline
				tooltip = "ARTIFACT_EQUIPPED_TOOLTIP"
				default_format = "#weak"
			}
		}

		hbox = { #Artifact Name, Durability and isNew tooltip
			layoutpolicy_horizontal = expanding

			vbox = {
				name = "icon"
				layoutpolicy_vertical = expanding
				margin = { 2 2 }

				icon_artifact = {
					blockoverride "tooltipwidget" {}
				}

				block "new_artifact"
				{
					text_single = {
						visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
						margin_top = -14
						text = "NEW_ARTIFACT"
						align = nobaseline

						tooltip = "NEW_ARTIFACT_TOOLTIP"
					}
				}
			}

			vbox = {
				name = "text"
				layoutpolicy_vertical = expanding
				margin_top = 4
				margin_bottom = 10

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetRarityAndSlotType]"
					max_width = 300
					using = Font_Size_Small
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetNameNoTooltip]"
					autoresize = yes
					max_width = 350
					using = Font_Size_Medium
					default_format = "#high"
					alwaystransparent = yes
				}

				spacer = {
					size = { 0 6 }
				}

				hbox_artifact_durability = {
					layoutpolicy_horizontal = expanding
					# simple tooltip override so that the durability tooltip doesnt show up here
					tooltip = ""
				}

				expand = {}
			}

			expand = {}
		}

		widget = { #Claims Specific buttons (steal, duel, war)
			parentanchor = center
			position = { 112 14 }
			allow_outside = yes

			hbox = {
				visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_round = {
					name = "steal"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/scheme.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
				}

				button_round = {
					name = "declare_war"
					size = { 35 35 }

					button_icon_highlight = {
						size = { 25 25 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/declare_war.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
					onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
				}

				button_round = {
					name = "duel"
					size = { 35 35 }

					button_icon_highlight = {
						parentanchor = center
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/duel.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
				}

				expand = {}
			}
		}

		widget = { #Reforge and Details Artifact
			name = "round_buttons"
			size = { 40 96 }
			parentanchor = right|vcenter
			position = { -7 -2 }
			allow_outside = yes

			datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

			hbox = {
				vbox = {
					layoutpolicy_vertical = expanding

					button_round = {
						name = "reforge"
						size = { 28 28 }

						button_icon_highlight = {
							size = { 20 20 }
							parentanchor = center
							texture = "gfx/interface/icons/flat_icons/reforge.dds"
						}
						visible = "[Artifact.GetOwner.IsLocalPlayer]"

						onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
						onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
						enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
						tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"

						icon = {
							name = "selection_glow"
							visible = "[Artifact.IsDurabilityLow]"
							parentanchor = center
							size = { 45 45 }

							state = {
								trigger_on_create = yes

								name = max_glow
								next = min_glow
								duration = 1
								using = Animation_Curve_Default
								alpha = 0.5
							}

							state = {
								name = min_glow
								next = max_glow
								duration = 1.6
								using = Animation_Curve_Default
								alpha = 0.3
							}

							background = {
								texture = "gfx/interface/component_masks/mask_fade_circle.dds"
								tintcolor = { 1 0.8 0.6 1 }
							}
						}
					}

					####################################<ART_AUCT>####################################
					art_auc_btn_simple = {}
					####################################</ART_AUCT>####################################

					button_round = {
						name = "details"
						size = { 28 28 }

						button_icon_highlight = {
							parentanchor = center
							position = { 0 -6 }
							size = { 20 20 }
							texture = "gfx/interface/icons/flat_icons/dots.dds"
						}

						onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
						onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
						tooltip = "ARTIFACT_DETAILS"
					}

					####################################<DISTRIBUTE-ARTIFACTS>##########################
					button_round = {
						name = "distribute_no_close"
						visible = "[And(VariableSystem.Exists( 'keep_open_on_distro'), Artifact.GetOwner.IsLocalPlayer)]"
						size = { 28 28 }

						button_icon_highlight = {
							parentanchor = center
							size = { 20 20 }
							texture = "gfx/interface/icons/flat_icons/move_capital.dds"
						}

						onclick = "[GetScriptedGui('distribute_artifact').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"
						tooltip = "gift_artifact_interaction"
					}

					button_round = {
						name = "distribute_and_close"
						visible = "[And(Not(VariableSystem.Exists( 'keep_open_on_distro')), Artifact.GetOwner.IsLocalPlayer)]"
						size = { 28 28 }

						button_icon_highlight = {
							parentanchor = center
							size = { 20 20 }
							texture = "gfx/interface/icons/flat_icons/kick_player.dds"
						}

						onclick = "[InventoryView.Close]"
						onclick = "[GetScriptedGui('distribute_artifact').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"
						tooltip = "gift_artifact_interaction"
					}
					####################################</DISTRIBUTE-ARTIFACTS>#########################

				}
				vbox = {
					layoutpolicy_vertical = expanding

					## UPGRADING AN ARTIFACT ##
					button_round = {
						name = "upgrade_qualifying_artifact"
						visible = "[Artifact.GetOwner.IsLocalPlayer]"
						enabled = "[GetScriptedGui('AM_is_upgradeable_artifact').IsShown(GuiScope.SetRoot(Character.MakeScope).AddScope('target', Artifact.MakeScope).End)]"

						size = { 28 28 }

						button_icon_highlight = {
							parentanchor = center
							size = { 22 22 }
							position = { 0 -4 }
							texture = "gfx/interface/icons/flat_icons/arrow_vertical.dds"
						}

						#onclick = "[GetScriptedGui('AM_perform_artifact_upgrade').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('target', Artifact.MakeScope).End)]"

						onclick = "[GetVariableSystem.Set('upgrade_artifact_dialog', 'yes')]"
						onclick = "[GetScriptedGui('AM_upgrade_artifact_set_id').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('artifact', Artifact.MakeScope).End)]"

						tooltip = "UPGRADE_THIS_ARTIFACT_TT"
					}
				}
			}
		}
	}

	type widget_artifact_entry_compact = widget
	{
		# Requires
		# datacontext = character
		# datacontext = Inventory
		# datacontext = InventorySlot

		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"
		datacontext = "[GetIllustration( 'artifact_regional_pattern' )]"
		size = { 540 56 }
		using = tooltip_above

		button_standard = { #Artefact Icon Rarity and New Glow
			size = { 92% 100% }

			framesize = { 249 78 }
			spriteType = Corneredtiled
			spriteborder = { 20 20 }

			icon =  {
				texture = "[Illustration.GetTextureForCulture( Artifact.GetCulture )]"
				spriteType = Corneredtiled
				size = { 100% 10% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.5
				alwaystransparent = yes
			}

			icon =  {
				texture = "[Illustration.GetTextureForCulture( Artifact.GetCulture )]"
				spriteType = Corneredtiled
				size = { 100% 10% }
				color = "[Artifact.GetRarityColor]"
				alpha = 0.5
				alwaystransparent = yes
				parentanchor = bottom
			}

			block "button"
			{
				enabled = "[Character.IsLocalPlayer]"
				clicksound = "event:/DLC/EP1/SFX/UI/inventory_artifact_place"
			}

			block "overlay"
			{
				using = default_character_list_overlay
			}

			block "background_button_overrides" {}

			tooltipwidget = {
				artifact_tooltip = {}
			}

			using = tooltip_es

			block "new_artifact"
			{
				icon = {
					name = "new_artifact_glow_compact"
					visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
					parentanchor = center
					position = { 2 2 }
					size = { 100% 100% }

					state = {
						trigger_on_create = yes

						name = max_glow
						next = min_glow
						duration = 1
						using = Animation_Curve_Default
						alpha = 0.5
					}

					state = {
						name = min_glow
						next = max_glow
						duration = 1.6
						using = Animation_Curve_Default
						alpha = 0.3
					}

					background = {
						texture = "gfx/interface/component_effects/innovation_glow.dds"
						margin = { 15 13 }
						spriteType = Corneredstretched
						spriteborder = { 30 30 }
						tintcolor = { 1 0.8 0.6 1 }
					}
				}
			}
		}

		hbox = { #Artifact Name, Durability and isNew tooltip
			layoutpolicy_horizontal = expanding
			max_width = 515

			vbox = {
				name = "icon_compact"
				layoutpolicy_vertical = expanding
				margin_top = 0
				margin_left = -2

				icon_artifact_compact = {
					parentanchor = top
					blockoverride "tooltipwidget" {}
				}

				block "new_artifact"
				{
					text_single = {
						visible = "[LocalPlayerNewArtifacts.IsNewArtifact( Artifact.Self )]"
						margin_top = -14
						text = "NEW_ARTIFACT"
						align = nobaseline

						tooltip = "NEW_ARTIFACT_TOOLTIP"
					}
				}
			}

			vbox = {
				name = "text_compact"
				layoutpolicy_vertical = expanding
				margin_top = -7
				margin_bottom = 0
				spacing = -2

				expand = {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetRarityAndSlotType]"
					max_width = 300
					using = Font_Size_Small
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "[Artifact.GetNameNoTooltip]"
					autoresize = yes
					max_width = 300
					using = Font_Size_Small
					default_format = "#high"
					alwaystransparent = yes
				}
				expand = {}
			}

			expand = {}

			vbox = {
				layoutpolicy_vertical = expanding
				margin_top = 4
				margin_right = 20
				hbox_artifact_durability_compact = {
					#layoutpolicy_horizontal = expanding
					# simple tooltip override so that the durability tooltip doesnt show up here
					tooltip = ""
				}
				expand = {}
				flowcontainer = { #Artifact Equip Satus
					name = "equip_status_compact"
					visible = "[Inventory.IsEquipped( Artifact.Self )]"
					allow_outside = yes
					margin_top = -28
					margin_right = 5
					text_single = {
						text = "EQUIPPED_ARTIFACT"
						align = right|nobaseline
						tooltip = "ARTIFACT_EQUIPPED_TOOLTIP"
						default_format = "#weak"
					}
				}
			}


		}

		#widget = { #Claims Specific buttons (steal, duel, war)
			#parentanchor = center
			#position = { 112 14 }
			#allow_outside = yes

			#hbox = {
				#visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
				#layoutpolicy_horizontal = expanding
				#spacing = 2

				#button_round = {
					#name = "steal"
					#size = { 35 35 }

					#button_icon_highlight = {
						#parentanchor = center
						#size = { 25 25 }
						#texture = "gfx/interface/icons/flat_icons/scheme.dds"
					#}

					#enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
					#onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
					#tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip( 'start_stealing_back_artifact' )]"
				#}

				#button_round = {
					#name = "declare_war"
					#size = { 35 35 }

					#button_icon_highlight = {
						#size = { 25 25 }
						#parentanchor = center
						#texture = "gfx/interface/icons/flat_icons/declare_war.dds"
					#}

					#enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
					#onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
					#tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
				#}

				#button_round = {
					#name = "duel"
					#size = { 35 35 }

					#button_icon_highlight = {
						#parentanchor = center
						#size = { 25 25 }
						#texture = "gfx/interface/icons/flat_icons/duel.dds"
					#}

					#enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
					#onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
					#tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
				#}

				#expand = {}
			#}
		#}

		widget = { #Reforge and Details Artifact
			name = "round_buttons_compact"
			size = { 40 45 }
			parentanchor = right|vcenter
			position = { -2 0 }
			allow_outside = yes

			datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

			vbox = {
				spacing = -3
				hbox = {
					layoutpolicy_horizontal = expanding

					button_round = {
						name = "reforge_compact"
						size = { 25 25 }

						button_icon_highlight = {
							size = { 15 15 }
							parentanchor = center
							texture = "gfx/interface/icons/flat_icons/reforge.dds"
						}
						visible = "[Artifact.GetOwner.IsLocalPlayer]"

						onclick = "[ToggleGameViewData( 'reforge_artifact', Artifact.GetID )]"
						onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
						enabled = "[Artifact.CanReforgeOrRepair( Artifact.GetOwner.Self )]"
						tooltip = "[Artifact.GetReforgeOrRepairTooltip( Artifact.GetOwner.Self )]"

						icon = {
							name = "selection_glow_compact"
							visible = "[Artifact.IsDurabilityLow]"
							parentanchor = center
							size = { 45 45 }

							state = {
								trigger_on_create = yes

								name = max_glow
								next = min_glow
								duration = 1
								using = Animation_Curve_Default
								alpha = 0.5
							}

							state = {
								name = min_glow
								next = max_glow
								duration = 1.6
								using = Animation_Curve_Default
								alpha = 0.3
							}

							background = {
								texture = "gfx/interface/component_masks/mask_fade_circle.dds"
								tintcolor = { 1 0.8 0.6 1 }
							}
						}
					}

					button_round = {
						name = "details_compact"
						size = { 25 25 }

						button_icon_highlight = {
							parentanchor = center
							position = { 0 -6 }
							size = { 15 15 }
							texture = "gfx/interface/icons/flat_icons/dots.dds"
						}

						onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
						onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
						tooltip = "ARTIFACT_DETAILS"
					}
				}

				####################################<ART_AUCT>####################################
				art_auc_btn_simple = {}
				####################################</ART_AUCT>###################################

				expand = {}
			}
		}
	}

	type hbox_artifact_durability_compact = hbox
	{
		visible = "[Artifact.IsValid]"
		spacing = 2
		tooltip = "[Artifact.GetDurabilityTooltip]"

		text_single = {
			visible = "[And( Artifact.ShouldDecay, GreaterThanOrEqualTo_int32( Artifact.GetYearsUntilDecay, '(int32)0' ) )]"
			max_width = 80
			text = "ARTIFACT_YEARS_UNTIL_DECAY"
			using = Font_Size_Small
			align = nobaseline
		}

		icon = {
			visible = "[Artifact.IsDurabilityLow]"
			size = { 15 15 }
			texture = "gfx/interface/icons/symbols/icon_warning.dds"
		}

		progressbar_standard = {
			name = "durability_high_compact"
			visible = "[Not( Artifact.IsDurabilityLow )]"
			size = { 50 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		progressbar_standard = {
			name = "durability_low_compact"
			visible = "[Artifact.IsDurabilityLow]"
			size = { 50 10 }

			min = 0
			max = "[FixedPointToFloat( Artifact.GetMaxDurability )]"
			value = "[FixedPointToFloat( Artifact.GetDurability )]"
		}

		icon_flat_standard = {
			size = { 15 15 }
			texture = "gfx/interface/icons/flat_icons/quality.dds"
		}


		expand = {}
	}

	type artifact_claim = widget
	{
		# Requires
		# datacontext = Inventory
		# datacontext = InventorySlot

		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		size = { 560 90 }
		using = tooltip_es

		widget = {
			name = "background"
			size = { 78% 100% }

			background = {
				using = Background_Area_Dark
			}

			tooltipwidget = {
				artifact_tooltip = {}
			}
		}

		widget = {
			name = "horizontal_icons"
			parentanchor = center
			position = { 35 10 }
			allow_outside = yes

			hbox = {
				visible = "[And( Not( Artifact.GetOwner.IsLocalPlayer ), Artifact.HasClaim( GetPlayer ) )]"
				layoutpolicy_horizontal = expanding
				spacing = 2

				button_round = {
					name = "steal"
					size = { 30 30 }

					button_icon_highlight = {
						parentanchor = center
						size = { 20 20 }
						texture = "gfx/interface/icons/flat_icons/scheme.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('start_stealing_back_artifact')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('start_stealing_back_artifact')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('start_stealing_back_artifact')]"

					using = tooltip_below
				}

				button_round = {
					name = "declare_war"
					size = { 30 30 }

					button_icon_highlight = {
						size = { 20 20 }
						parentanchor = center
						texture = "gfx/interface/icons/flat_icons/declare_war.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('declare_war_interaction')]"
					onclick = "[Artifact.GetOwner.OpenDeclareWarViewWithArtifactCB]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('declare_war_interaction')]"
					using = tooltip_below
				}

				button_round = {
					name = "duel"
					size = { 30 30 }

					button_icon_highlight = {
						parentanchor = center
						size = { 20 20 }
						texture = "gfx/interface/icons/flat_icons/duel.dds"
					}

					enabled = "[Artifact.GetOwner.IsPlayerInteractionValid('challenge_for_artifact_interaction')]"
					onclick = "[Artifact.GetOwner.OpenPlayerInteraction('challenge_for_artifact_interaction')]"
					tooltip = "[Artifact.GetOwner.GetPlayerInteractionTooltip('challenge_for_artifact_interaction')]"
				}

				button_round = {
					name = "details"
					size = { 30 30 }

					onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
					onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
					tooltip = "ARTIFACT_DETAILS"

					button_icon_highlight = {
						parentanchor = center
						position = { 0 -6 }
						size = { 20 20 }
						texture = "gfx/interface/icons/flat_icons/dots.dds"
					}
				}

				expand = {}
			}
		}

		widget = {
			name = "item_and_owner"
			size = { 425 90 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				parentanchor = left
				margin = { 2 2 }

				vbox = {
					layoutpolicy_vertical = expanding

					icon_artifact = {
						blockoverride "tooltipwidget" {}
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 4

					hbox = {
						layoutpolicy_horizontal = expanding

						text_single = {
							name = "rarity"
							layoutpolicy_horizontal = expanding
							text = "[Artifact.GetRarityAndType]"
							max_width = 190
							using = Font_Size_Small
						}

						expand = {}

						text_single = {
							name = "house_claim"
							layoutpolicy_horizontal = expanding
							visible = "[ArtifactClaim.IsHouseClaim]"
							text = "ARTIFACT_HOUSE_CLAIM"
							align = right
							margin_right = 10
							max_width = 130
						}

						text_single = {
							name = "personal_claim"
							layoutpolicy_horizontal = expanding
							visible = "[ArtifactClaim.IsPersonalClaim]"
							text = "ARTIFACT_PERSONAL_CLAIM"
							align = right
							margin_right = 10
							max_width = 130
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							text = "[Artifact.GetNameNoTooltip]"
							size = { 350 30 }
							#max_width = 300
							elide = right
							using = Font_Size_Medium
							default_format = "#high"
						}

						expand = {}
					}

					hbox_artifact_durability = {
						layoutpolicy_horizontal = expanding
						margin_left = -3
						margin_top = 8
						# simple tooltip override so that the durability tooltip doesnt show up here
						tooltip = ""

						expand = {}
					}

					expand = {}
				}
			}
		}

		widget = {
			name = "portrait_artifact_owner"
			size = { 90 90 }
			parentanchor = right
			position = { -40 0}

			block "portrait"
			{
				vbox = {
					name = "righthand_portrait"

					portrait_head_small = {
						datacontext = "[Artifact.GetOwner]"
						name = "owner_portrait"
					}
				}
			}
		}
	}

	type icon_artifact = icon {
		size = { 90 90 }

		block "tooltipwidget" {
			tooltipwidget = {
				artifact_tooltip = {}
			}
		}

		icon = {
			name = "rarity_icon"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_bg.dds"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}

		icon = {
			name = "unique_icon"
			visible = "[Artifact.IsUnique]"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_unique.dds"
		}

		icon = {
			name = "artifact_icon"
			size = { 90% 90% }
			parentanchor = center

			texture = "[Artifact.GetIcon]"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}
	}

	type icon_artifact_compact = icon {
		size = { 55 55 }

		block "tooltipwidget" {
			tooltipwidget = {
				artifact_tooltip = {}
			}
		}

		icon = {
			name = "rarity_icon_compact"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_bg.dds"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}

		icon = {
			name = "unique_icon_compact"
			visible = "[Artifact.IsUnique]"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_unique.dds"
		}

		icon = {
			name = "artifact_icon_compact"
			size = { 90% 90% }
			parentanchor = center

			texture = "[Artifact.GetIcon]"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}
	}

	type button_artifact = button {
		size = { 90 90 }
		datacontext = "[AccessLocalPlayerCachedData.AccessNewArtifacts]"

		icon = {
			name = "rarity_icon"
			size = { 100% 100% }
			parentanchor = top
			alwaystransparent = yes

			texture = "gfx/interface/icons/artifact/artifact_bg.dds"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }
		}

		icon = {
			name = "unique_icon"
			visible = "[Artifact.IsUnique]"
			size = { 100% 100% }
			parentanchor = center
			alwaystransparent = yes
			texture = "gfx/interface/icons/artifact/artifact_unique.dds"
		}

		button = {
			name = "artifact_icon"
			size = { 90% 90% }
			parentanchor = center

			texture = "[Artifact.GetIcon]"
			frame = "[Artifact.GetIconFrame]"
			framesize = { 240 240 }

			block "on_click"
			{
				onclick = "[ToggleGameViewData( 'artifact_details', Artifact.GetID )]"
				onclick = "[LocalPlayerNewArtifacts.RemoveNewArtifact( Artifact.Self )]"
			}
		}

		tooltipwidget = {
			artifact_tooltip = {}
		}
	}
}
